# =========================================================
# tzchat.tazocode.com - Vue(정적) + /api 프록시 + WebSocket
# - HTTP→HTTPS 리다이렉트
# - Let's Encrypt 인증서 사용
# - CSP 완화(Ionic/Capacitor), 캐시 정책, 로그 분리
# =========================================================

# 1) HTTP → HTTPS 리다이렉트 + ACME 검증 허용
server {
    listen 80;
    listen [::]:80;
    server_name tzchat.tazocode.com;

    # ACME 검증 경로(인증/갱신용)
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        access_log /var/log/nginx/acme_access.log;
        error_log  /var/log/nginx/acme_error.log;
    }

    return 301 https://$host$request_uri;
}

# 2) HTTPS 서버
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name tzchat.tazocode.com;

    # --- SSL (Let's Encrypt) ---
    ssl_certificate     /etc/letsencrypt/live/tzchat.tazocode.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/tzchat.tazocode.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # (선택) HSTS
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    client_max_body_size 20m;

    # 🚩 CSP (Ionic/Capacitor 호환 확장)
    add_header Content-Security-Policy "
      default-src 'self' capacitor:;
      connect-src 'self' https: wss: capacitor: data: blob:;
      img-src 'self' https: data: blob:;
      media-src 'self' https: data: blob:;
      font-src 'self' https: data:;
      style-src 'self' 'unsafe-inline' https: data:;
      script-src 'self' 'unsafe-inline' 'unsafe-eval' https: blob:;
      frame-ancestors 'self';
      base-uri 'self';
    " always;

    # 공통 프록시 헤더
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Port  443;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;

    # 프론트(dist) 루트
    root  /home/tazofarm/project/tzchat/tzchatapp/dist;
    index index.html;

    # -----------------------------------------------------
    # ✅ 정적 법/정책 문서: SPA보다 우선 매칭
    #   실제 경로는 서버의 public/legal 위치로 맞춰주세요.
    #   (백엔드 저장소가 /home/tazofarm/project/tzchat/public/legal 이라고 가정)
    # -----------------------------------------------------
    # /legal → /legal/index.html
    location = /legal {
        return 301 /legal/;
    }

    location /legal/ {
        alias /home/tazofarm/project/tzchat/public/legal/;
        index index.html;
        try_files $uri $uri/ =404;

        # 초기에는 캐시 비활성화(문서 잦은 업데이트 대응)
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";

        access_log /var/log/nginx/legal_access.log;
        error_log  /var/log/nginx/legal_error.log;
    }

    # 파비콘(루트)
    location = /favicon.png {
        alias /home/tazofarm/project/tzchat/public/favicon.png;
        try_files $uri =404;
        add_header Cache-Control "public, max-age=86400";
        access_log /var/log/nginx/frontend_access.log;
        error_log  /var/log/nginx/frontend_error.log;
    }

    # -----------------------------------------------------
    # 과거 개별 경로 호환(선택): /privacy(.html) → /legal/privacy
    # -----------------------------------------------------
    location = /privacy { return 301 /legal/privacy; }
    location = /privacy.html { return 301 /legal/privacy; }

    # 정적 청크(/assets/) : 장기 캐시
    location /assets/ {
        root /home/tazofarm/project/tzchat/tzchatapp/dist;
        try_files $uri =404;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        access_log /var/log/nginx/assets_access.log;
        error_log  /var/log/nginx/assets_error.log;
    }

    # Service Worker : 캐시 금지
    location = /service-worker.js {
        root /home/tazofarm/project/tzchat/tzchatapp/dist;
        try_files $uri =404;
        add_header Cache-Control "no-store";
        add_header Pragma "no-cache";
        add_header Expires "0";
        access_log /var/log/nginx/frontend_access.log;
        error_log  /var/log/nginx/frontend_error.log;
    }

    # 업로드 프록시
    location /uploads/ {
        proxy_pass http://localhost:2000;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Origin $http_origin;
        access_log /var/log/nginx/uploads_access.log;
        error_log  /var/log/nginx/uploads_error.log;
    }

    # API 프록시
    location /api/ {
        proxy_pass http://localhost:2000;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Origin $http_origin;
        add_header Cache-Control "no-store";
        access_log /var/log/nginx/api_access.log;
        error_log  /var/log/nginx/api_error.log;
    }

    # 디버그
    location ^~ /debug/ {
        proxy_pass http://localhost:2000;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Origin $http_origin;
        add_header Cache-Control "no-store";
        access_log /var/log/nginx/debug_access.log;
        error_log  /var/log/nginx/debug_error.log;
    }

    # WebSocket (Socket.IO)
    location = /socket.io {
        proxy_pass http://localhost:2000;
        proxy_buffering off;
        proxy_read_timeout 3600s;
        proxy_send_timeout 60s;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Origin     $http_origin;
        access_log /var/log/nginx/ws_access.log;
        error_log  /var/log/nginx/ws_error.log;
    }
    location ^~ /socket.io/ {
        proxy_pass http://localhost:2000;
        proxy_buffering off;
        proxy_read_timeout 3600s;
        proxy_send_timeout 60s;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Origin     $http_origin;
        access_log /var/log/nginx/ws_access.log;
        error_log  /var/log/nginx/ws_error.log;
    }

    # SPA history (※ /legal/ 블록보다 아래에 둬야 우선순위 OK)
    location / {
        try_files $uri $uri/ /index.html;
        access_log /var/log/nginx/frontend_access.log;
        error_log  /var/log/nginx/frontend_error.log;
    }

    # index.html 재검증
    location = /index.html {
        try_files $uri =404;
        add_header Cache-Control "max-age=0, must-revalidate";
        access_log /var/log/nginx/frontend_access.log;
        error_log  /var/log/nginx/frontend_error.log;
    }
}
