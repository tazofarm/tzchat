# =========================================================
# tzchat.tazocode.com - Vue(정적) + /api 프록시 + WebSocket
# =========================================================

# 0) www → 비-www 리다이렉트 (HTTP)
server {
    listen 80;
    listen [::]:80;
    server_name www.tzchat.tazocode.com;
    return 301 https://tzchat.tazocode.com$request_uri;
}

# 1) HTTP → HTTPS 리다이렉트 + ACME 검증 허용 (비-www)
server {
    listen 80;
    listen [::]:80;
    server_name tzchat.tazocode.com;

    location /.well-known/acme-challenge/ {
        root /var/www/html;
        access_log /var/log/nginx/acme_access.log;
        error_log  /var/log/nginx/acme_error.log;
    }
    return 301 https://$host$request_uri;
}

# 2) HTTPS 서버 (비-www)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name tzchat.tazocode.com;

    # --- SSL (Let's Encrypt) ---
    ssl_certificate     /etc/letsencrypt/live/tzchat.tazocode.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/tzchat.tazocode.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    client_max_body_size 20m;

    # ✅ CSP: 반드시 "한 줄"로! (HTTP/2는 헤더에 개행 금지)
    add_header Content-Security-Policy "default-src 'self' capacitor:; connect-src 'self' https: wss: capacitor: data: blob:; img-src 'self' https: data: blob:; media-src 'self' https: data: blob:; font-src 'self' https: data:; style-src 'self' 'unsafe-inline' https: data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https: blob:; frame-ancestors 'self'; base-uri 'self';" always;

    # 공통 프록시 헤더
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Port  443;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;

    # 프론트(dist) 루트
    root  /home/tazofarm/project/tzchat/tzchatapp/dist;
    index index.html;

    # -----------------------------------------------------
    # 정적 법/정책 문서
    # -----------------------------------------------------
    location = /legal { return 301 /legal/; }

    location ~ ^/legal/([a-z0-9\-]+)$ {
        return 301 /legal/$1.html;
    }

    location /legal/ {
        alias /home/tazofarm/project/tzchat/tzchatapp/dist/legal/;
        index index.html;
        try_files $uri $uri/ =404;

        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";

        access_log /var/log/nginx/legal_access.log;
        error_log  /var/log/nginx/legal_error.log;
    }

    # 파비콘
    location = /favicon.png {
        alias /home/tazofarm/project/tzchat/tzchatapp/dist/favicon.png;
        try_files $uri =404;
        add_header Cache-Control "public, max-age=86400";
        access_log /var/log/nginx/frontend_access.log;
        error_log  /var/log/nginx/frontend_error.log;
    }

    # 과거 경로 호환
    location = /privacy      { return 301 /legal/privacy; }
    location = /privacy.html { return 301 /legal/privacy; }

    # 정적 청크
    location /assets/ {
        root /home/tazofarm/project/tzchat/tzchatapp/dist;
        try_files $uri =404;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        access_log /var/log/nginx/assets_access.log;
        error_log  /var/log/nginx/assets_error.log;
    }

    # Firebase Messaging Service Worker (루트)
    location = /firebase-messaging-sw.js {
        root /home/tazofarm/project/tzchat/tzchatapp/dist;
        try_files $uri =404;
        add_header Cache-Control "no-store";
        add_header Pragma "no-cache";
        add_header Expires "0";
        access_log /var/log/nginx/frontend_access.log;
        error_log  /var/log/nginx/frontend_error.log;
    }

    # Service Worker
    location = /service-worker.js {
        root /home/tazofarm/project/tzchat/tzchatapp/dist;
        try_files $uri =404;
        add_header Cache-Control "no-store";
        add_header Pragma "no-cache";
        add_header Expires "0";
        access_log /var/log/nginx/frontend_access.log;
        error_log  /var/log/nginx/frontend_error.log;
    }

    # 업로드: 정적 파일 직접 서빙
    location /uploads/ {
        alias /home/tazofarm/project/tzchat/uploads/;
        autoindex off;
        try_files $uri =404;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        access_log /var/log/nginx/uploads_access.log;
        error_log  /var/log/nginx/uploads_error.log;
    }

    # API 프록시
    location /api/ {
        proxy_pass http://localhost:2000;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Origin $http_origin;
        add_header Cache-Control "no-store";
        access_log /var/log/nginx/api_access.log;
        error_log  /var/log/nginx/api_error.log;
    }

    # 디버그
    location ^~ /debug/ {
        proxy_pass http://localhost:2000;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Origin $http_origin;
        add_header Cache-Control "no-store";
        access_log /var/log/nginx/debug_access.log;
        error_log  /var/log/nginx/debug_error.log;
    }

    # WebSocket
    location = /socket.io {
        proxy_pass http://localhost:2000;
        proxy_buffering off;
        proxy_read_timeout 3600s;
        proxy_send_timeout 60s;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Origin     $http_origin;
        access_log /var/log/nginx/ws_access.log;
        error_log  /var/log/nginx/ws_error.log;
    }
    location ^~ /socket.io/ {
        proxy_pass http://localhost:2000;
        proxy_buffering off;
        proxy_read_timeout 3600s;
        proxy_send_timeout 60s;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Origin     $http_origin;
        access_log /var/log/nginx/ws_access.log;
        error_log  /var/log/nginx/ws_error.log;
    }

    # SPA history
    location / {
        try_files $uri $uri/ /index.html;
        access_log /var/log/nginx/frontend_access.log;
        error_log  /var/log/nginx/frontend_error.log;
    }

    # index.html 재검증
    location = /index.html {
        try_files $uri =404;
        add_header Cache-Control "max-age=0, must-revalidate";
        access_log /var/log/nginx/frontend_access.log;
        error_log  /var/log/nginx/frontend_error.log;
    }
}
