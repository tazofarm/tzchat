// src/lib/socket.js
// ‚ö†Ô∏è ÌîÑÎ°†Ìä∏ÏóîÎìú Ï†ÑÏö©! Socket.IO ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Í≥µÏö© Î™®Îìà
// Í∏ÄÏûêÎäî Í∏∞Î≥∏ Í≤ÄÏ†ï(Ï†ÑÏó≠ Ïä§ÌÉÄÏùº Í∏∞Ï§Ä)Ïù¥Î©∞, Ï£ºÏÑù/Î°úÍ∑∏Î•º ÌíçÎ∂ÄÌïòÍ≤å ÎÑ£ÏóàÏäµÎãàÎã§.

import { io } from "socket.io-client";

let socket = null;

/**
 * ÏÜåÏºì Ïó∞Í≤∞ (HTTPS Ïò§Î¶¨ÏßÑ Í≥†Ï†ï)
 * - Ï†àÎåÄ URL Í∏àÏßÄ: ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Ïò§Î¶¨ÏßÑ ÏÇ¨Ïö© ‚Üí ÌòºÏÑ±ÏΩòÌÖêÏ∏† Ï∞®Îã® Î∞©ÏßÄ
 * - ÏõπÏÜåÏºì Ïö∞ÏÑ†(transports)
 * - withCredentials: ÏÑ∏ÏÖò Ïø†ÌÇ§ Ï†ÑÎã¨
 */
export function connectSocket() {
  if (socket && socket.connected) return socket;

  console.log("üîå [Socket] connecting... (origin relative)");

  socket = io("/", {
    path: "/socket.io",
    transports: ["websocket"],
    withCredentials: true,
    reconnection: true,
    reconnectionAttempts: 10,
  });

  // ‚îÄ Î°úÍ∑∏ ÏµúÎåÄÌôî
  socket.on("connect", () => {
    console.log("‚úÖ [Socket] connected:", socket.id);
  });
  socket.on("connect_error", (err) => {
    console.error("‚ùå [Socket] connect_error:", err?.message, err);
  });
  socket.on("error", (err) => {
    console.error("‚ùå [Socket] error:", err?.message, err);
  });
  socket.on("disconnect", (reason) => {
    console.warn("‚ö†Ô∏è [Socket] disconnected:", reason);
  });

  return socket;
}

export function getSocket() {
  return socket;
}
